using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.IO;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Add_Application;
//
//    var Add_Application = ConfigFile.FromJson(jsonString);

namespace Add_Application
    {

        public partial class ConfigFile
        {
            [JsonProperty("serverName", Required = Required.Always)]
            public string ServerName { get; set; }
            //public int UserCollectionFolderId { get; set; }
            //public int MachineCollectionFolderId { get; set; }

            [JsonProperty("allPrintersCollectionName", Required = Required.Always)]
            public string AllPrintersCollectionName { get; set; }

            [JsonProperty("allPrintersCollectionId", Required = Required.Always)]
            public string AllPrintersCollectionId { get; set; }

            [JsonProperty("userCollectionFolderName", Required = Required.Always)]
            public string userCollectionFolderName { get; set; }

            [JsonProperty("machineCollectionFolderName", Required = Required.Always)]
            public string machineCollectionFolderName { get; set; }

            [JsonProperty("applicationFolderName", Required = Required.Always)]
            public string applicationFolderName { get; set; }

            [JsonProperty("siteCode", Required = Required.Always)]
            public string siteCode { get; set; }

            public string sccmUsername { get; set; }
            public string sccmPassword { get; set; }
            public string printerServerName { get; set; }
            public string printerServerUsername { get; set; }
            public string printerServerPassword { get; set; }

        }

        public partial class ConfigFile
        {
            public static ConfigFile FromJson(string json) => JsonConvert.DeserializeObject<ConfigFile>(json, Add_Application.Converter.Settings);
            public static ConfigFile FromJsonFile(string json) => JsonConvert.DeserializeObject<ConfigFile>(File.ReadAllText(json), Add_Application.Converter.Settings);
    }

        public static class Serialize
        {
            public static string ToJson(this ConfigFile self) => JsonConvert.SerializeObject(self, Add_Application.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
    }
